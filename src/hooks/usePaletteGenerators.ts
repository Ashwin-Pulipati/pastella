import {
  Color,
  GenerationStrategy,
  PaletteType,
  AiMode,
} from "@/types/pastelPalette.types";
import { useCallback } from "react";

interface UsePaletteGeneratorsProps {
  strategy: GenerationStrategy;
  paletteSize: number;
  paletteType: PaletteType;
  aiMode: AiMode;
  aiPrompt: string;
  selectedKeywords: string[];
  setCurrentPalette: React.Dispatch<React.SetStateAction<Color[]>>;
  setGenerationCount: React.Dispatch<React.SetStateAction<number>>;
  setIsGenerating: React.Dispatch<React.SetStateAction<boolean>>;
  showNotification: (msg: string) => void;
}

function usePaletteGenerators({
  strategy,
  paletteSize,
  paletteType,
  aiPrompt,
  selectedKeywords,
  setCurrentPalette,
  setGenerationCount,
  setIsGenerating,
  showNotification,
}: UsePaletteGeneratorsProps) {
  const generatePalette = useCallback(async () => {
    setIsGenerating(true);
    try {
      const response = await fetch("/api/generate-palette", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          strategy,
          paletteSize,
          paletteType,
          aiPrompt,
          selectedKeywords,
        }),
      });

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const result = await response.json();
      const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!jsonText) {
        console.error("Gemini Response was empty. Full API Result:", result);
        throw new Error("API returned an empty response.");
      }

      const parsedJson = JSON.parse(jsonText);

      if (parsedJson.palette && Array.isArray(parsedJson.palette)) {
        const newPalette = parsedJson.palette.map((c: Color) => ({
          name: c.name || c.hex.toUpperCase(),
          hex: c.hex,
        }));
        setCurrentPalette(newPalette);
        setGenerationCount((prev) => prev + 1);
        showNotification("Palette generated by AI!");
      } else {
        throw new Error("Invalid palette data in API response.");
      }
    } catch (error) {
      console.error("Error generating AI palette:", error);
      showNotification("AI generation failed. Please try again.");
    } finally {
      setIsGenerating(false);
    }
  }, [
    strategy,
    paletteSize,
    paletteType,
    aiPrompt,
    selectedKeywords,
    setCurrentPalette,
    setGenerationCount,
    setIsGenerating,
    showNotification,
  ]);

  return { generatePalette };
}

export default usePaletteGenerators;
